"""
    Put all the code which deals with the phone state in here.
    This file currently contains:
        1. setup_phone_state
        2. tear_down_phone_state #TODO fix this process.
"""

import os, time, subprocess

"""
    Executes a command on the shell and pipes it onto a variable and return the variable.
    @params command Type: String <Command to execute on the shell>
    @returns Type: String <output displayed on the shell>
"""
def cmdline(command):
    proc = subprocess.Popen(command, stdout=subprocess.PIPE, shell=True)
    (out, err) = proc.communicate()
    return out, err

"""
    Takes in the device info string generated by ADB and returns the model from it.
    @params device_info_string Type:String <string generated by adb>
    @returns Type: String <Model String>
"""

def parse_device_info(device_info_string):
    device_info_string = device_info_string.split(" ")
    for element in device_info_string:
        if "model" in element:
            return element.split(":")[-1]    




"""
    Validates that a phone is connected and returns the phone make, model and adb ID. 
    @params None
    @returns Type: String String <returns device ID and device info>
"""
def get_current_connected_phone():
    attached_phones, err = cmdline(["adb devices -l"])
    attached_phones = attached_phones.decode('utf-8').split("\n")[1:-2]
    if len(attached_phones) > 1:
        print("More than one phone attached!")
        return None
    
    adb_id, device_info_string = attached_phones[0].split("       ")

    return adb_id, parse_device_info(device_info_string)

"""
    Prepares the android phone for measurements, instantiates a new instance of Google Chrome and establishes a link between chrome-remote-interface and the chrome instance running on the phoen.
    @params adb_id Type: String <ID of the connected android device> 
    @returns None
"""
def setup_phone_state(adb_id):
    print("Setting up phone state!")
    os.system("adb -s {} shell am start -n com.android.chrome/com.google.android.apps.chrome.Main".format(adb_id))
    time.sleep(5)
    os.system("adb -s {} forward tcp:9222 localabstract:chrome_devtools_remote".format(adb_id))
    

"""
    #TODO Not working as of now, need more permissions.
    Kills the chrome process in the connected phone
    @params None
    @returns None
"""
def tear_down_chrome_process():
    os.system("adb shell ps | grep com.android.chrome | awk '{print $2}' | xargs adb shell kill")


